<?php
/**
 * @file
 * wetkit_language.module
 */

include_once 'wetkit_language.features.inc';

/**
 * Implements hook_form_alter().
 */
function wetkit_language_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'wetkit_page_node_form' || $form_id == 'wetkit_page_other_node_form') {
    unset($form['translation']);
  }
}

/**
 * Implements hook_i18n_object_info_alter().
 */
function wetkit_language_i18n_object_info_alter(&$info) {
  $i18n_path = 'admin/structure/menu/*';
  if (module_exists('wetkit_deployment') && !drupal_match_path(current_path(), $i18n_path)) {
    // Use UUID field to identify menu_link.
    $info['menu_link']['key'] = 'uuid';
    $info['menu_link']['load callback'] = 'wetkit_language_i18n_menu_link_uuid_load';

    // Use UUID field to identify taxonomy_term.
    $info['taxonomy_term']['key'] = 'uuid';
    $info['taxonomy_term']['load callback'] = 'wetkit_language_i18n_taxonomy_term_uuid_load';
  }
}

/**
 * Callback to load menu_link by UUID.
 *
 * @see http://thereisamoduleforthat.com/content/features-and-i18n-configuration-management-part-2-menu-item-madness
 */
function wetkit_language_i18n_menu_link_uuid_load($uuid) {
  if (!empty($uuid)) {
    $query = db_select('menu_links', 'ml');
    $query->leftJoin('menu_router', 'm', 'm.path = ml.router_path');
    $query->fields('ml');
    // Weight should be taken from {menu_links}, not {menu_router}.
    $query->addField('ml', 'weight', 'link_weight');
    $query->fields('m');
    $query->condition('ml.uuid', $uuid);
    if ($item = $query->execute()->fetchAssoc()) {
      $item['weight'] = $item['link_weight'];
      _menu_link_translate($item);
      return $item;
    }
  }
  return FALSE;
}

/**
 * Callback to load taxonomy_term by UUID.
 */
function wetkit_language_i18n_taxonomy_term_uuid_load($uuid) {
  if (!empty($uuid)) {
    $query = new EntityFieldQuery();
    $type = 'taxonomy_term';
    $query->entityCondition('entity_type', $type)
      ->propertyCondition('uuid', $uuid, '=')
      ->range(0, 1);
    if ($result = $query->execute()) {
      $entities = entity_load($type, array_keys($result[$type]));
      return i18n_translation_set_index($entities);
    }
  }
}

/**
 * Implements hook_uuid_node_features_export_render_alter().
 *
 * @see http://drupal.org/node/2038963#comment-7637095
 */
function wetkit_language_uuid_node_features_export_render_alter(&$export, $node, $module) {
  if (isset($export->translations->data)) {
    foreach ($export->translations->data as $language => $value) {
      unset($export->translations->data[$language]['entity_id']);
      unset($export->translations->data[$language]['changed']);
    }
  }
}

/**
 * Implements hook_query_tag_alter().
 */
function wetkit_language_query_features_menu_link_alter($query) {
  // Add missing attributes for translation.
  if (module_exists('entity_menu_links')) {
    $query->fields('menu_links', array('uuid', 'language', 'customized'));
  }
}

/**
 * Implements hook_variable_info().
 */
function wetkit_language_variable_info($options) {
  $variables['pathauto_ignore_words'] = array(
    'type' => 'array',
    'title' => t('Strings to Remove', array(), $options),
    'default' => '',
    'description' => t('Words to strip out of the URL alias, separated by commas. Do not use this to remove punctuation.', array(), $options),
    'required' => TRUE,
    'localize' => TRUE,
    'group' => 'pathauto',
  );
  return $variables;
}

/**
 * Implements hook_variable_group_info().
 */
function wetkit_language_variable_group_info() {
  $groups['pathauto'] = array(
    'title' => t('Pathauto'),
    'description' => t('Pathauto variable settings.'),
    'access' => 'administer site configuration',
  );
  return $groups;
}

/**
 * Implements hook_preprocess_page().
 */
function wetkit_language_preprocess_page(&$vars) {
  // Set the language switcher using our helper function.
  $vars['menu_lang_bar'] = _wetkit_language_lang_switcher();
}

/**
 * Implements hook_preprocess_panes_pane().
 */
function wetkit_language_preprocess_panels_pane(&$vars) {
  // Unset the language links from node display.
  if ($vars['pane']->type == 'node_links') {
    if (is_array($vars['content']) && isset($vars['content']['translation'])) {
      unset($vars['content']['translation']);
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function wetkit_language_preprocess_maintenance_page(&$vars) {
  // Set the language switcher using our helper function.
  $vars['menu_lang_bar'] = _wetkit_language_lang_switcher();
}

/**
 * Implements _wetkit_language_lang_switcher().
 */
function _wetkit_language_lang_switcher() {
  global $language;
  $term = '';
  $language_nodes = '';
  $language_terms = '';
  $languages = language_list('enabled');

  $data = array();
  $data['path'] = drupal_is_front_page() ? '<front>' : $_GET['q'];

  // Handle node translations.
  if (arg(0) == 'node' && arg(1) > 0) {
    $node_path = 'node/' . arg(1);
    $language_nodes = translation_path_get_translations($node_path);
  }

  // Handle term translations.
  if (arg(0) == 'taxonomy' && arg(1) == 'term' && arg(2) > 0) {
    $term = taxonomy_get_term_by_name(arg(2));
    $language_terms = i18n_taxonomy_term_get_translation(array('tid' => arg(2)), $language->language);
  }

  // Handle all languages.
  if (count($languages[1]) > 1) {
    foreach ($languages[1] as $lang) {
      if ($lang->language != $language->language) {
        $data[$lang->language]['modifier'] = $lang->native;

        // We are translating a node so will check if missing translations.
        if ($language_nodes && !empty($language_nodes[$lang->language])) {
          $data[$lang->language]['path'] = $language_nodes[$lang->language];
        }
        // We are translating a term.
        if ($term) {
          $data[$lang->language]['path'] = 'taxonomy/term/' . $language_terms[$lang->language]->tid;
        }

        if (empty($data[$lang->language]['path'])) {
          $data[$lang->language]['path'] = $data['path'];
        }
        $data[$lang->language]['attributes'] = array('class' => array('link'), 'hreflang' => $lang->language, 'lang' => $lang->language);
      }
    }

    drupal_alter('wetkit_language_lang_switcher', $data);

    if (empty($data['query'])) {
      $data['query'] = drupal_get_query_parameters();
    }

    $lang_switcher = array();
    foreach ($languages[1] as $lang) {
      if ($lang->language != $language->language) {
        $lang_switcher[] = l($data[$lang->language]['modifier'], $data[$lang->language]['path'], array('attributes' => $data[$lang->language]['attributes'], 'language' => $lang, 'query' => $data['query']));
      }
    }
    return implode('<br />', $lang_switcher);
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function wetkit_language_theme_registry_alter(&$theme_registry) {
  // Kill the next/previous forum topic navigation links.
  foreach ($theme_registry['region']['preprocess functions'] as $key => $value) {
    if ($value == 'wetkit_language_preprocess_region') {
      unset($theme_registry['region']['preprocess functions'][$key]);
      array_unshift($theme_registry['region']['preprocess functions'], 'wetkit_language_preprocess_region');
    }
  }
}
