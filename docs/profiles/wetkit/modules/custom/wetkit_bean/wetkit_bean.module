<?php
/**
 * @file
 * wetkit_bean.module
 */

include_once 'wetkit_bean.default_content.inc';
include_once 'wetkit_bean.features.inc';

module_load_include('inc', 'wetkit_bean', 'wetkit_bean.field');

/**
 * Implements hook_bean_types_api_info().
 */
function wetkit_bean_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_bean_types().
 */
function wetkit_bean_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'wetkit_bean') . '/plugins/bean';

  $plugins['wetkit_bean'] = array(
    'label' => t('Bean'),
    'description' => t('The default implementation of Bean.'),
    'handler' => array(
      'class' => 'WetKitBean',
      'parent' => 'bean',
      'path' => $plugin_path,
      'file' => 'wetkit_bean.bean.inc',
    ),
  );
  $plugins['wetkit_highlight'] = array(
    'label' => t('Highlight'),
    'description' => t('A highlighted bean for displaying important blocks.'),
    'handler' => array(
      'class' => 'WetKitHighlightBean',
      'parent' => 'bean',
      'path' => $plugin_path,
      'file' => 'wetkit_bean.highlight.inc',
    ),
  );
  $plugins['wetkit_link'] = array(
    'label' => t('Link'),
    'description' => t('A custom bean for displaying icons and associated links.'),
    'handler' => array(
      'class' => 'WetKitLinkBean',
      'parent' => 'bean',
      'path' => $plugin_path,
      'file' => 'wetkit_bean.link.inc',
    ),
  );
  $plugins['wetkit_media'] = array(
    'label' => t('Media'),
    'description' => t('A custom bean for displaying accessible media.'),
    'handler' => array(
      'class' => 'WetKitMediaBean',
      'parent' => 'bean',
      'path' => $plugin_path,
      'file' => 'wetkit_bean.media.inc',
    ),
  );
  $plugins['wetkit_search'] = array(
    'label' => t('Search'),
    'description' => t('A custom search bean for displaying search boxes.'),
    'handler' => array(
      'class' => 'WetKitSearchBean',
      'parent' => 'bean',
      'path' => $plugin_path,
      'file' => 'wetkit_bean.search.inc',
    ),
  );
  $plugins['wetkit_share'] = array(
    'label' => t('Share'),
    'description' => t('A custom share bean for displaying share widgets.'),
    'handler' => array(
      'class' => 'WetKitShareBean',
      'parent' => 'bean',
      'path' => $plugin_path,
      'file' => 'wetkit_bean.share.inc',
    ),
  );
  $plugins['wetkit_slide'] = array(
    'label' => t('Slideshow'),
    'description' => t('A slideshow bean for displaying rotating blocks.'),
    'handler' => array(
      'class' => 'WetKitSlideBean',
      'parent' => 'bean',
      'path' => $plugin_path,
      'file' => 'wetkit_bean.slide.inc',
    ),
  );
  $plugins['wetkit_slideout'] = array(
    'label' => t('Slide-Out Tab'),
    'description' => t('A Slide-Out Tab for providing optional content.'),
    'handler' => array(
      'class' => 'WetKitSlideOutBean',
      'parent' => 'bean',
      'path' => $plugin_path,
      'file' => 'wetkit_bean.slideout.inc',
    ),
  );
  $plugins['wetkit_rate'] = array(
    'label' => t('Rate'),
    'description' => t('A custom rate bean for displaying a fivestar widget.'),
    'handler' => array(
      'class' => 'WetKitRateBean',
      'parent' => 'bean',
      'path' => $plugin_path,
      'file' => 'wetkit_bean.rate.inc',
    ),
  );
  $plugins['wetkit_twitter'] = array(
    'label' => t('Twitter'),
    'description' => t('A custom twitter bean for displaying twitter widgets.'),
    'handler' => array(
      'class' => 'WetKitTwitterBean',
      'parent' => 'bean',
      'path' => $plugin_path,
      'file' => 'wetkit_bean.twitter.inc',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_theme().
 */
function wetkit_bean_theme() {
  $items = array();

  $items['wetkit_highlight_settings'] = array(
    'arguments' => array(
      'image_style' => NULL,
    ),
    'file' => 'theme/wetkit_bean.theme.inc',
  );
  $items['wetkit_slide_collection'] = array(
    'file' => 'theme/wetkit_bean.theme.inc',
    'variables' => array(
      'bean' => NULL,
      'items' => NULL,
      'use_pager' => TRUE,
    ),
  );
  $items['wetkit_slide_header'] = array(
    'file' => 'theme/wetkit_bean.theme.inc',
    'variables' => array(
      'items' => NULL,
      'title' => NULL,
      'type' => NULL,
      'attributes' => NULL,
    ),
  );
  $items['wetkit_slide_tab_panels'] = array(
    'file' => 'theme/wetkit_bean.theme.inc',
    'variables' => array(
      'items' => NULL,
      'title' => NULL,
      'type' => NULL,
      'attributes' => NULL,
    ),
  );
  $items['wetkit_media_collection'] = array(
    'file' => 'theme/wetkit_bean.theme.inc',
    'variables' => array(
      'bean' => NULL,
      'items' => NULL,
      'use_pager' => TRUE,
    ),
  );
  $items['wetkit_slideout'] = array(
    'file' => 'theme/wetkit_bean.theme.inc',
    'variables' => array(
      'show_title' => '',
      'hide_title' => '',
      'icon' => '',
      'content' => array(),
      'slideout_render' => '',
    ),
  );

  return $items;
}

/**
 * Implements hook_page_build().
 */
function wetkit_bean_page_build() {
  drupal_add_css(drupal_get_path('module', 'wetkit_bean') . '/css/wetkit_bean.css', array(
    'group' => CSS_THEME,
    'every_page' => TRUE,
  ));

  drupal_add_js(drupal_get_path('module', 'wetkit_bean') . '/js/wetkit_bean.js');
}

/**
 * Implements hook_preprocess_image_style().
 */
function wetkit_bean_preprocess_image_style(&$variables) {
  $variables['attributes']['class'][] = str_replace('_', '-', $variables['style_name']);

  // TODO: Force all image styles to use image-actual.
  $variables['attributes']['class'][] = 'image-actual';
}

/**
 * Implements hook_preprocess_hook().
 */
function wetkit_bean_preprocess_entity(&$variables) {
  $entity_type = $variables['entity_type'];
  if ($entity_type == 'bean') {
    $id = entity_id($variables['entity_type'], $variables['bean']);
    if ($id) {
      $variables['theme_hook_suggestions'][] = $variables['entity_type'] . '__' . preg_replace('/[^a-z0-9]/', '_', strtolower($id));
    }
  }
}

/**
 * Implements hook_apps_app_info().
 */
function wetkit_bean_apps_app_info() {
  return array(
    'configure form' => 'wetkit_bean_configure_form',
  );
}

/**
 * Implements hook_contextual_links_view_alter().
 *
 * Customize our contextual links as per our display settings.
 *
 * (contextual.module should probably provide a better way of adding/customizing
 * these links - currently it's very tied to the menu system).
 */
function field_collection_contextual_links_view_alter(&$element, &$items) {
  // We only want our own contextual links.
  if (isset($element['#element']['#field']['type']) && $element['#element']['#field']['type'] === 'field_collection') {

    if (!empty($element['#element']['#display']['settings']) && !empty($element['#links'])) {

      $display_settings = $element['#element']['#display']['settings'];

      foreach ($element['#links'] as $key => $link) {

        // @see menu_contextual_links() in menu.inc and
        // @see contextual_pre_render_links() in contextual.module.
        if (strpos($key, 'field-collection-') === 0) {
          $op = substr($key, strlen('field-collection-'));
          if (isset($display_settings[$op])) {

            // Empty string indicates user does not want the link at all.
            if ($display_settings[$op] === '') {
              unset($element['#links'][$key]);
            }
            // Otherwise just override the title with the setting.
            else {
              $element['#links'][$key]['title'] = $display_settings[$op];
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_block_view_alter().
 */
function wetkit_bean_block_view_alter(&$data, $block) {
  // Add "add" link to block contextual links.
  if ($block->module == 'bean' && isset($data['content']) && is_array($data['content']) && array_key_exists('bean', $data['content'])) {
    foreach ($data['content']['bean'] as $id => $bean) {
      if ($bean['#bundle'] == 'wetkit_slide') {
        $field = field_info_field('field_slide');
        $path = field_collection_field_get_path($field);
        $data['content']['#contextual_links']['field_collection'] = array($path . '/add', array('bean', $id));
      }
      elseif ($bean['#bundle'] == 'wetkit_media') {
        $field = field_info_field('field_media');
        $path = field_collection_field_get_path($field);
        $data['content']['#contextual_links']['field_collection'] = array($path . '/add', array('bean', $id));
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wetkit_bean_form_bean_form_alter(&$form, $form_state) {
  // Provide a simpler form for ordering and editing slides.
  if ($form['#bundle'] == 'wetkit_slide') {
    $path = drupal_get_path('module', 'wetkit_bean');
    drupal_add_js($path . '/js/wetkit_bean.admin.js');
    drupal_add_css($path . '/css/wetkit_bean.admin.css');

    $form['#submit'][] = 'wetkit_bean_form_bean_form_submit';
  }
  // Provide a simpler form for ordering and editing media.
  if ($form['#bundle'] == 'wetkit_media') {
    $path = drupal_get_path('module', 'wetkit_bean');
    drupal_add_js($path . '/js/wetkit_bean.admin.js');
    drupal_add_css($path . '/css/wetkit_bean.admin.css');

    $form['#submit'][] = 'wetkit_bean_form_bean_form_submit';
  }
}

/**
 * Submit callback for bean slide form to redirect.
 */
function wetkit_bean_form_bean_form_submit($form, &$form_state) {
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    $form_state['redirect'] = $destination['destination'];
  }
}

/**
 * Returns the plugin object for the given plugin type.
 */
function wetkit_bean_get_plugin($type) {
  if (empty($type)) {
    $type = 'wetkit_slide:null';
  }

  $plugins = &drupal_static(__FUNCTION__, array());
  if (!isset($plugins[$type])) {
    $plugin_info = wetkit_bean_get_plugin_info($type);
    try {
      $plugins[$type] = new $plugin_info['class']();
    }
    catch (Exception $e) {
      watchdog('wetkit_bean', 'Bad bean plugin type: @type', array('@type' => $type));
      throw $e;
    }
  }
  return $plugins[$type];
}

/**
 * Returns plugin info array for the given plugin type.
 */
function wetkit_bean_get_plugin_info($type) {
  if ($type === 'wetkit_slide:null') {
    return array(
      'name' => t('Missing plugin'),
      'description' => t('Plugin not selected, or missing.'),
      'class' => 'WetKitBeanSlideNullPlugin',
    );
  }
  $plugin_info = wetkit_bean_get_plugin_info_all();
  return isset($plugin_info[$type]) ? $plugin_info[$type] : FALSE;
}

/**
 * Returns plugin info array for all plugin types.
 */
function wetkit_bean_get_plugin_info_all() {
  $plugin_info = &drupal_static(__FUNCTION__, array());
  if (empty($plugin_info)) {
    $plugin_info = module_invoke_all('wetkit_bean_plugin_info');
    drupal_alter('wetkit_bean_plugin_info', $plugin_info);
  }
  return $plugin_info;
}

/**
 * Implements hook_wetkit_bean_plugin_info().
 */
function wetkit_bean_wetkit_bean_plugin_info() {
  return array(
    'wetkit_slide:tabbedinterface' => array(
      'name' => t('WetKit Slide: Tabbed Interface'),
      'description' => t('WET-BOEW Tabbed Interface'),
      'url' => 'http://wet-boew.github.com',
      'class' => 'WetKitBeanSlideTabbedInterfacePlugin',
      'responsive' => TRUE,
    ),
  );
}

/**
 * Configuration Form for WetKit Bean.
 */
function wetkit_bean_configure_form($form, &$form_state) {
  $form = array();
  $form['wetkit_bean'] = array(
    '#type' => 'fieldset',
    '#title' => t('WetKit Bean Settings'),
    '#collapsible' => TRUE,
  );
  $form['wetkit_bean']['future_options'] = array(
    '#markup' => '<p>' . t('Future options will appear here to configure WetKit Bean.') . '</p>',
  );
  $form['#submit'][] = 'wetkit_bean_configure_form_submit';

  return system_settings_form($form);
}

/**
 * Handle submission of the WetKit Metatag configuration page.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function wetkit_bean_configure_form_submit($form, &$form_state) {
  // Change query-strings on css/js files to enforce reload for all users.
  _drupal_flush_css_js();
}

/**
 * Helper function to manufacture a new Bean of a given type.
 *
 * @param string $bean_type
 *   The type of bean to create
 * @param string $label
 *   Admin label for the bean
 * @param string $description
 *   (optional) Admin description for the bean
 * @param string $title
 *   (optional) Block title for the bean
 * @param array $fields_en
 *   (optional) An array of fields to assign. This should resemble the ACTUAL
 *   field array, as it is literally transposed onto the bean, with the
 *   exception that the language key should be omitted.
 * @param array $fields_fr
 *   (optional) An array of fields to assign. This should resemble the ACTUAL
 *   field array, as it is literally transposed onto the bean, with the
 *   exception that the language key should be omitted.
 * @param string $view_mode
 *   (optional) The view mode. Defaults to 'default'.
 */
function wetkit_bean_save_bean($bean_type, $label, $description = '', $title = '', $fields_en = array(), $fields_fr = array(), $view_mode = 'default') {

  $bean = wetkit_bean_create_bean($bean_type, $label, $description, $title, $fields_en, $view_mode);

  // Set the default translation mapping.
  $translation = array(
    'translate' => 0,
    'status' => 1,
    'language' => 'fr',
    'source' => 'en',
  );
  $fields_translated = array();
  foreach ($fields_fr as $field_key => $field_value) {
    $fields_translated[$field_key] = array();
    $fields_translated[$field_key]['fr'] = $field_value;
  }
  $bean_translated = entity_translation_get_handler('bean', $bean);
  $bean_translated->setTranslation($translation, $fields_translated);
  bean_save($bean);

  drupal_set_message(t('Created a new bean "@label" of type <em>@bean_type</em>', array('@label' => $label, '@bean_type' => $bean_type)));
}

/**
 * Create a bean from configuration.
 *
 * Normally, you can use wetkit_bean_save_bean(), however this is useful if
 * you need to manipulate the bean before saving.
 *
 * @param string $bean_type
 *   The type of bean to create
 * @param string $label
 *   Admin label for the bean
 * @param string $description
 *   (optional) Admin description for the bean
 * @param string $title
 *   (optional) Block title for the bean
 * @param array $fields
 *   (optional) An array of fields to assign. This should resemble the ACTUAL
 *   field array, as it is literally transposed onto the bean, with the
 *   exception that the language key should be omitted.
 * @param string $view_mode
 *   (optional) The view mode. Defaults to 'default'.
 *
 * @return Bean
 *   a Bean entity
 */
function wetkit_bean_create_bean($bean_type, $label, $description = '', $title = '', $fields = array(), $view_mode = 'default') {
  $config = array(
    'label' => $label,
    'description' => $description,
    'title' => $title,
    'type' => $bean_type,
    'view_mode' => $view_mode,
    'is_new' => TRUE,
  );
  foreach ($fields as $field_key => $field_value) {
    $config[$field_key] = array();
    $config[$field_key]['en'] = $field_value;
  }
  $bean = bean_create($config);
  return $bean;
}

/**
 * Delete a bean from configuration.
 *
 * @param string $bean_name
 *   The type of bean to delete
 */
function wetkit_bean_delete_bean($bean_name) {
  $bean = bean_delta_load($bean_name);
  if (empty($bean)) {
    drupal_set_message(t('There is no bean found with delta @delta.', array('@delta' => $bean_name)));
    return;
  }
  bean_delete($bean);
}

/**
 * Implements hook_theme_registry_alter().
 */
function wetkit_bean_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'wetkit_bean') . '/templates';
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
}

/**
 * Implements hook_form_alter().
 */
function wetkit_bean_form_alter(&$form, &$form_state, $form_id) {

  // Create the General Settings Fieldset.
  if ($form_id == 'bean_panels_bean_panels_content_type_edit_form') {
    $form['general_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('General Settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['general_settings']['override_title_markup'] = $form['override_title_markup'];
    $form['general_settings']['override_title'] = $form['override_title'];
    $form['general_settings']['override_title_text'] = $form['override_title_text'];
    $form['general_settings']['view_mode'] = $form['view_mode'];
    $form['general_settings']['bean_delta'] = $form['bean_delta'];

    // Unset some Form Variables.
    unset($form['override_title_markup']);
    unset($form['override_title']);
    unset($form['override_title_text']);
    unset($form['view_mode']);
    unset($form['bean_delta']);
  }
}
