<?php
/**
 * @file
 * wetkit_core.module
 */

include_once 'wetkit_core.block.inc';
include_once 'wetkit_core.features.inc';


/**
 * Implements hook_ctools_plugin_directory().
 */
function wetkit_core_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_theme().
 */
function wetkit_core_theme() {
  return array(
    'wetkit_core_collapsible' => array(
      'variables' => array(
        'handle' => NULL,
        'content' => NULL,
        'collapsed' => FALSE,
      ),
      'file' => 'plugins/styles/collapsible/collapsible.inc',
    ),
  );
}

/**
 * Implements hook_admin_menu_output_alter().
 */
function wetkit_core_admin_menu_output_alter(&$content) {
  // Remove the 'Disable developer modules' link.
  unset($content['icon']['icon']['toggle-modules']);
}

/**
 * Implements hook_panels_pane_content_alter().
 *
 * Hold the title of the pane for later use (i.e. show it as the tab's title),
 * and remove it form the pane itself.
 */
function wetkit_core_panels_pane_content_alter(&$content, $pane, $args, $context, $renderer, $display) {
  // Get the regions that should be themed as tabs.
  foreach ($display->panel_settings as $key => $values) {
    if ($key == 'style_settings') {
      continue;
    }
    if (!empty($values['style']) && $values['style'] == 'tabs' && $pane->panel == $key && !empty($content->title)) {
      // Capture the title.
      wetkit_core_pane_titles($display->did, $pane->pid, $content->title);
      // Remove the title from the pane.
      $content->title = '';
    }
  }

}

/**
 * Implements hook_preprocess_panels_ipe_pane_wrapper().
 */
function wetkit_core_preprocess_panels_ipe_pane_wrapper(&$variables) {
  $pane = $variables['pane'];
  $display = $variables['display'];
  $renderer = $variables['renderer'];

  if (user_access('administer advanced pane settings')) {
    $css_link = array(
      'title' => '<span>' . t('CSS') . '</span>',
      'href' => $renderer->get_url('pane-css', $pane->pid),
      'html' => TRUE,
      'attributes' => array(
        'class' => array('ctools-use-modal', 'pane-css'),
        'title' => t('CSS'),
      ),
    );

    // Make sure css is added just after style.
    $style_link_key = array_search('style', array_keys($variables['links']));
    $links_start = array_slice($variables['links'], 0, $style_link_key + 1);
    $links_end = array_slice($variables['links'], $style_link_key);

    // Add css link
    $links_start['css'] = $css_link;
    $variables['links'] = array_merge($links_start, $links_end);
  }
}

/**
 * Get or set pane title.
 *
 * @param int $did
 *   Panels display ID.
 * @param int $pid
 *   Panels pane ID.
 * @param string $title
 *   Optional; Panels pane title to set, or if empty then the function will
 *   return the captured title based on the display ID and pane ID properties.
 *
 * @return bool
 *   Unsanitized pane title, or NULL if doesn't exist.
 */
function wetkit_core_pane_titles($did = NULL, $pid = NULL, $title = NULL) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (!isset($title)) {
    return isset($cache[$did][$pid]) ? $cache[$did][$pid] : NULL;
  }
  $cache[$did][$pid] = $title;
}

/**
 * Implements hook_page_build().
 */
function wetkit_core_page_build() {
  // Set Flag.
  if ((variable_get('wetkit_core_load', 1) == 1)) {
    //drupal_flush_all_caches();
    variable_set('wetkit_core_load', 0);
  }
  // Some Default messages to let the user know where to begin.
  if ((variable_get('wetkit_core_doc', 1) == 1)) {
    drupal_set_message(t('Thank you for installing the WxT Drupal Distribution for the Web Experience Toolkit. You may login at the following page: <a href="@login">User Login</a>', array('@login' => url('user'))), 'status');
    drupal_set_message(t('For more information please ensure to read the online <a href="@documentation">Documentation</a>', array('@documentation' => url('http://drupalwxt.github.io'))), 'warning');
    variable_set('wetkit_core_doc', 0);
  }
  // Solve some of the display inconsistencies between WET and Drupal.
  drupal_add_css(drupal_get_path('module', 'wetkit_core') . '/css/wetkit_core.css', array(
    'group' => CSS_THEME,
    'every_page' => TRUE,
  ));
}

/**
 * Implements hook_menu_edit_item_alter().
 */
function wetkit_core_page_alter(&$page) {
  // Hide Toolbar for those who have permissions to access the Admin Menu.
  if (user_access('access administration menu') && !empty($page['page_top']['toolbar'])) {
    $page['page_top']['toolbar']['#access'] = FALSE;
  }
}

/**
 * Implements hook_menu_edit_item_alter().
 */
function wetkit_core_form_menu_edit_item_alter(&$form, &$form_state) {
  // Some menu items have a pre-defined path which cannot be modified hence no
  // default_value.
  if (isset($form['link_path']['#default_value'])) {
    $default_value = $form['link_path']['#default_value'];

    if (preg_match('/^<nolink>\/[0-9]+$/', $default_value)) {
      $default_value = '<nolink>';
    }

    $form['link_path']['#default_value'] = $default_value;
    $form['link_path']['#description'] .= ' ' . t('Enter "%nolink" to generate non-linkable item', array('%nolink' => '<nolink>'));
  }
}

/**
 * Implements hook_menu().
 */
function wetkit_core_menu() {
  // Add an menu item that will render without an a href.
  $items['<nolink>'] = array(
    'page callback' => 'drupal_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Add an menu item that can be used with mini panels.
  $items['<minipanel>'] = array(
    'page callback' => 'drupal_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function wetkit_core_menu_alter(&$items) {
  if (!empty($items['admin/workbench'])) {
    $items['admin/workbench']['title'] = 'Workbench';
  }
  if (!empty($items['admin/dashboard'])) {
    $items['admin/dashboard']['description'] = 'Quick view of common functionality.';
  }
  if (!empty($items['admin/help/ah'])) {
    $items['admin/help/ah']['description'] = 'Renders readme files for individual projects.';
  }
}

/**
 * Implements hook_form_alter().
 */
function wetkit_core_form_alter(&$form, &$form_state, $form_id) {

  // WxT render cache.
  if ($form_id == 'system_performance_settings') {
    $form['wxt'] = array(
      '#type' => 'fieldset',
      '#title' => t('WxT'),
      '#weight' => 0,
    );
    $form['wxt']['render_cache_clear'] = array(
      '#type' => 'submit',
      '#value' => t('Clear all WxT render caches'),
      '#submit' => array('wetkit_core_configure_form_submit'),
    );
  }

  // Move the featured field into publishing options.
  if (!empty($form['field_featured_status']) && isset($form['options']) && $form['options']['#access']) {
    $form['options']['field_featured_status'] = $form['field_featured_status'];
    $form['field_featured_status'] = array('#language' => NULL);
  }

  if (!empty($form['field_archived_content']) && isset($form['options']) && $form['options']['#access']) {
    $form['options']['field_archived_content'] = $form['field_archived_content'];
    $form['field_archived_content'] = array('#language' => NULL);
  }

  // Remove the description from the shared widget.
  if (!empty($form['field_share_widget'])) {
    $form['options']['field_share_widget'] = $form['field_share_widget'];
    $form['options']['field_share_widget']['#weight'] = '0';
    $form['field_share_widget'] = array('#language' => NULL);
  }

  // Simplify the menu block edit form.
  if ($form_id == 'menu_block_menu_tree_content_type_edit_form' ||
      $form_id == 'menu_block_ref_content_type_edit_form') {
    $form['admin_title']['#access'] = TRUE;
    $form['depth']['#access'] = TRUE;
    $form['display_options']['#default_value'] = 'advanced';
    $form['display_options']['#access'] = TRUE;
    $form['title_link']['#access'] = TRUE;
    $form['buttons']['#prefix'] = '<div class="menu-block-ctools-buttons">';

    // Disable some options since they appear busted or confusing in Menu Block
    // TODO - http://drupal.org/node/1649112.
    $form['parent_mlid']['#access'] = TRUE;
    $form['sort']['#access'] = TRUE;
  }

  // Simplify the menu_block_add_block_form.
  if ($form_id == 'menu_block_add_block_form') {
    $form['settings']['admin_title']['#access'] = TRUE;
    $form['settings']['depth']['#access'] = TRUE;
    $form['settings']['display_options']['#default_value'] = 'advanced';
    $form['settings']['display_options']['#access'] = TRUE;
    $form['settings']['title_link']['#access'] = TRUE;
    $form['settings']['buttons']['#prefix'] = '<div class="menu-block-ctools-buttons">';

    // Disable some options since they appear busted or confusing in Menu Block
    // TODO - http://drupal.org/node/1649112.
    $form['settings']['parent_mlid']['#access'] = TRUE;
    $form['settings']['sort']['#access'] = TRUE;
  }

  // Create the General Settings Fieldset.
  if ($form_id == 'ctools_block_content_type_edit_form') {
    // Create General Settings Fieldset.
    $form['general_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('General Settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['general_settings']['override_title'] = $form['override_title'];
    $form['general_settings']['override_title_markup'] = $form['override_title_markup'];
    $form['general_settings']['override_title_text'] = $form['override_title_text'];

    // Unset some Form Variables.
    unset($form['override_title']);
    unset($form['override_title_markup']);
    unset($form['override_title_text']);
  }

  // Check if Total Control module exists.
  if (module_exists('total_control')) {

    // Peform logic on generic total control types.
    $total_control_types = array(
      'total_control_create_content_type_edit_form',
      'total_control_panel_pages_content_type_edit_form',
      'total_control_node_types_content_type_edit_form',
      'total_control_overview_content_content_type_edit_form',
    );
    if (in_array($form_id, $total_control_types)) {
      // Create General Settings Fieldset.
      $form['general_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('General Settings'),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );
      $form['general_settings']['override_title'] = $form['override_title'];
      $form['general_settings']['override_title_markup'] = $form['override_title_markup'];
      $form['general_settings']['override_title_text'] = $form['override_title_text'];
      $form['general_settings']['types'] = $form['types'];

      // Unset some Form Variables.
      unset($form['override_title']);
      unset($form['override_title_markup']);
      unset($form['override_title_text']);
      unset($form['types']);
    }

    // Peform logic on generic total control menus.
    $total_control_menus = array(
      'total_control_menus_content_type_edit_form',
    );

    if (in_array($form_id, $total_control_menus)) {
      // Create General Settings Fieldset.
      $form['general_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('General Settings'),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );
      $form['general_settings']['override_title'] = $form['override_title'];
      $form['general_settings']['override_title_markup'] = $form['override_title_markup'];
      $form['general_settings']['override_title_text'] = $form['override_title_text'];
      $form['general_settings']['menus'] = $form['menus'];

      // Unset some Form Variables.
      unset($form['override_title']);
      unset($form['override_title_markup']);
      unset($form['override_title_text']);
      unset($form['menus']);
    }

    // Peform logic on generic total control taxonomy.
    $total_control_taxonomy = array(
      'total_control_taxonomy_content_type_edit_form',
    );

    if (in_array($form_id, $total_control_taxonomy)) {
      // Create General Settings Fieldset.
      $form['general_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('General Settings'),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );
      $form['general_settings']['override_title'] = $form['override_title'];
      $form['general_settings']['override_title_markup'] = $form['override_title_markup'];
      $form['general_settings']['override_title_text'] = $form['override_title_text'];
      $form['general_settings']['vids'] = $form['vids'];

      // Unset some Form Variables.
      unset($form['override_title']);
      unset($form['override_title_markup']);
      unset($form['override_title_text']);
      unset($form['vids']);
    }
  }
}

/**
 * Implements hook_apps_app_info().
 */
function wetkit_core_apps_app_info() {
  return array(
    'configure form' => 'wetkit_core_configure_form',
  );
}

/**
 * Configuration Form for WetKit Core.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function wetkit_core_configure_form($form, &$form_state) {
  $form = array();
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'system') . '/system.js',
  );
  $form['wetkit_core'] = array(
    '#type' => 'fieldset',
    '#title' => t('WetKit Core Settings'),
    '#collapsible' => TRUE,
  );
  $form['wetkit_core']['render_cache_desc'] = array(
    '#markup' => '<p>' . t('Rebuild the WxT specific render caches on the site.') . '</p>',
  );
  $form['wetkit_core']['render_cache_clear'] = array(
    '#type' => 'submit',
    '#value' => t('Clear all WxT render caches'),
    '#weight' => 19,
  );
  $form['#submit'][] = 'wetkit_core_configure_form_submit';

  return system_settings_form($form);
}

/**
 * Handle submission of the WetKit Core configuration page.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function wetkit_core_configure_form_submit($form, &$form_state) {
  // Clear WxT render cache.
  if ($form_state['values']['op'] == t('Clear all WxT render caches')) {
    cache_clear_all('wetkit_bean:slideout', 'cache', TRUE);
    cache_clear_all('wetkit_bootstrap:custom_search', 'cache', TRUE);
    cache_clear_all('wetkit_bootstrap:menu', 'cache', TRUE);

    drupal_set_message(t('WxT render caches cleared.'));
  }

  // Change query-strings on css/js files to enforce reload for all users.
  _drupal_flush_css_js();
}

/**
 * Wrapper function around filter_xss() with some additions.
 *
 * @param array $string
 *   String to be parsed.
 * @param array $allowed_tags
 *   Allowed tags to be included when parsing the string.
 *
 * @return array
 *   Return the modified string.
 */
function wetkit_core_filter_xss($string, $allowed_tags = array(
  'a',
  'em',
  'strong',
  'cite',
  'code',
  'ul',
  'ol',
  'li',
  'dl',
  'dt',
  'dd',
'br')) {
  return filter_xss($string, $allowed_tags);
}
