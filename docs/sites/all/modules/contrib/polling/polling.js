"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.5.1
var $, EndpointRegistry, PollingEndpoint;
$ = jQuery;

PollingEndpoint = /*#__PURE__*/function () {
  function PollingEndpoint(settings) {
    _classCallCheck(this, PollingEndpoint);

    var defaults;
    defaults = {
      url: '',
      interval: 5000,
      intervalMultiplier: 1.07,
      maxErrorCount: 15
    };
    this.settings = $.extend({}, defaults, settings);
    this.interval = this.settings.interval;
    this.errorCount = 0;
    this.callbacks = {};
    this.stopped = false;
  }

  _createClass(PollingEndpoint, [{
    key: "scheduleNextPoll",
    value: function scheduleNextPoll() {
      var _this = this;

      // Set the next timeout.
      return setTimeout(function () {
        _this.poll();

        if (!_this.stopped) {
          // Increase the interval.
          _this.interval = Math.floor(_this.interval * _this.settings.intervalMultiplier);
          return _this.scheduleNextPoll();
        }
      }, this.interval);
    }
  }, {
    key: "poll",
    value: function poll() {
      var _this2 = this;

      if (this.stopped) {
        return;
      }

      return jQuery.ajax({
        url: this.settings.url,
        success: function success(data) {
          var _, callback, ref;

          ref = _this2.callbacks;

          for (_ in ref) {
            callback = ref[_]; // Call all callbacks with the data.

            callback(data);
          }
        },
        error: function error(data) {
          // on 403 or 404 do *not* set a next polling try
          if (data.status === '403') {
            // forbidden
            _this2.stopped = true;
          } else if (data.status === '404') {
            // not found
            _this2.stopped = true;
          } else if (_this2.errorCount >= _this2.settings.maxErrorCount) {
            _this2.stopped = true;
          } else {
            _this2.errorCount += 1;
          }
        }
      });
    }
  }, {
    key: "addCallback",
    value: function addCallback(key, callback) {
      this.callbacks[key] = callback;
      return this;
    }
  }]);

  return PollingEndpoint;
}();

EndpointRegistry = /*#__PURE__*/function () {
  function EndpointRegistry() {
    _classCallCheck(this, EndpointRegistry);

    this.registry = {};
  }

  _createClass(EndpointRegistry, [{
    key: "registerUrl",
    value: function registerUrl(url, key, callback) {
      if (!this.registry[url]) {
        this.registry[url] = new PollingEndpoint({
          url: url
        });
      }

      return this.registry[url].addCallback(key, callback);
    }
  }, {
    key: "start",
    value: function start() {
      var endpoint, ref, url;
      ref = this.registry;

      for (url in ref) {
        endpoint = ref[url];
        endpoint.poll();
        endpoint.scheduleNextPoll();
      }
    }
  }]);

  return EndpointRegistry;
}();

Drupal.behaviors.polling = {
  registry: new EndpointRegistry(),
  attach: function attach(context, settings) {
    var _this3 = this;

    var defaults, start;

    if ($('html', context).length) {
      defaults = {
        initialTimeout: 500
      };
      settings = $.extend({}, defaults, settings.polling);

      start = function start() {
        return _this3.registry.start();
      };

      return setTimeout(start, settings.initialTimeout);
    }
  }
};