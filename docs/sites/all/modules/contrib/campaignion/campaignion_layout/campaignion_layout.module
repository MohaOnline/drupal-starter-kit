<?php

/**
 * @file
 * Hook implementations and callbacks for the campaignion layouts module.
 */

use Drupal\campaignion_layout\Entity;
use Drupal\campaignion_layout\Lookup;
use Drupal\campaignion_layout\Themes;
use Drupal\campaignion_layout\Context\LayoutCondition;
use Drupal\little_helpers\Services\Container;

// The field.module does not group its hooks so we have to include this here.
require_once 'campaignion_layout.field.inc';

/**
 * Implements hook_menu_alter().
 *
 * Enable theme-switching on all relevant paths.
 */
function campaignion_layout_menu_alter(&$items) {
  $callback = [
    'theme callback' => 'campaignion_layout_get_theme_for_entity',
    'theme arguments' => ['node', 1],
  ];
  $no_callback = [
    'theme callback' => '',
    'theme arguments' => [],
  ];
  $set_theme = [
    'view' => TRUE,
    'share' => TRUE,
    'webform-continue' => TRUE,
  ];
  foreach ($items as $path => &$item) {
    if (substr($path, 0, 6) == 'node/%') {
      $args = explode('/', $path, 4);
      $third_arg = $args[2] ?? NULL;
      if (!$third_arg || ($set_theme[$third_arg] ?? FALSE)) {
        $item = $callback + $item;
      }
      else {
        $item = $no_callback + $item;
      }
    }
  }
}

/**
 * Menu theme callback: Set the theme based on layout variation fields.
 *
 * @see campaignion_layout_menu_alter()
 */
function campaignion_layout_get_theme_for_entity($entity_type, $entity) {
  return Lookup::fromEntity($entity_type, $entity)->getTheme();
}

/**
 * Implements hook_little_helpers_services().
 */
function campaignion_layout_little_helpers_services() {
  $info['campaignion_layout.themes'] = [
    'class' => Themes::class,
    'constructor' => 'fromConfig',
  ];
  return $info;
}

/**
 * Implements hook_page_build().
 */
function campaignion_layout_page_build(&$page, $node = NULL) {
  $node = $node ?? menu_get_object();
  if ($node && ($item = Lookup::fromEntity('node', $node)->getItem())) {
    $page['#layout'] = $item->layout;
    $page['#reversed'] = $item->pageOrderIsReversed();
    $item->executeContextCondition();
  }
}

/**
 * Prepare variables for page templates.
 */
function campaignion_layout_preprocess_page(array &$vars) {
  $vars['layout'] = NULL;
  if ($layout = $vars['page']['#layout'] ?? NULL) {
    $vars['layout'] = $layout['name'];
    $suggestion = str_replace('-', '_', $layout['name']);
    array_unshift($vars['theme_hook_suggestions'], "page__layout__{$suggestion}");
    foreach ($layout['fields'] as $field_name => $settings) {
      $vars[$settings['variable']] = field_view_field('node', $vars['node'], $field_name, $settings['display']);
    }
  }
  $vars['reversed'] = !empty($vars['page']['#reversed']);
}

/**
 * Implements hook_form_FORM_ID_alter() for system_theme_settings().
 */
function campaignion_layout_form_system_theme_settings_alter(&$form, $form_state) {
  if (!($theme_name = $form_state['build_info']['args'][0] ?? NULL)) {
    return;
  }
  $theme = Container::get()->loadService('campaignion_layout.themes')->getTheme($theme_name);
  if (!$theme->hasFeature()) {
    return;
  }
  $form['layout_variations'] = [
    '#type' => 'fieldset',
    '#title' => t('Layout variations'),
  ];
  $form['layout_variations']['toggle_layout_variations'] = [
    '#type' => 'checkbox',
    '#title' => t('Make this theme and its layout variations available.'),
    '#default_value' => $theme->setting('toggle_layout_variations'),
  ];
  $states['visible'][':input[name="toggle_layout_variations"]']['checked'] = TRUE;
  $enabled = $theme->setting('layout_variations') ?? [];
  $form['layout_variations']['layout_variations'] = [
    '#type' => 'checkboxes',
    '#title' => t('Enabled layout variations.'),
    '#options' => $theme->layoutOptions(TRUE),
    '#default_value' => $enabled,
    '#states' => $states,
  ];
  $default = $theme->defaultLayout();
  $form['layout_variations']['layout_variations'][$default]['#disabled'] = TRUE;
  // Browsers don’t submit disabled checkboxes. So the value needs to be set
  // here otherwise the settings are saved without it.
  $form['layout_variations']['layout_variations'][$default]['#value'] = $default;
}

/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 *
 * Hide other fields on node forms.
 */
function campaignion_layout_form_node_form_alter(&$form, &$form_state) {
  $dependent_fields = module_invoke_all('campaignion_layout_dependent_fields');
  drupal_alter('campaignion_layout_dependent_fields', $dependent_fields);
  foreach (array_keys(array_filter($dependent_fields)) as $field_name) {
    if (!isset($form[$field_name])) {
      // Skip fields if they don’t appear in the form anyway.
      continue;
    }
    $states = [];
    foreach ($form_state['campaignion_layout_fields'][$field_name] ?? [] as $selector => $values) {
      foreach ($values as $value) {
        $states['visible'][$selector][] = ['value' => $value];
      }
    }
    if ($states) {
      $form[$field_name]['#states'] = $states;
    }
    else {
      $form[$field_name]['#access'] = FALSE;
    }
  }

  $instances = field_info_instances('node', $form['#node']->type);
  if (isset($instances['layout'])) {
    $form['layout'] = [
      '#type' => 'fieldset',
      '#title' => $form['layout'][LANGUAGE_NONE][0]['#title'],
      '#group' => 'additional_settings',
      '#weight' => -10,
      '#access' => $form['layout'][LANGUAGE_NONE][0]['#access'] ?? TRUE,
    ] + $form['layout'];
    $form['layout'][LANGUAGE_NONE][0]['#type'] = 'container';
  }

  if (isset($form['layout_background_image'])) {
    $form['layout_background_image']['#wizard_secondary'] = TRUE;
  }
}

/**
 * Implements hook_campaignion_layout_dependent_fields().
 */
function campaignion_layout_campaignion_layout_dependent_fields() {
  $dependent_fields['layout_background_image'] = TRUE;
  return $dependent_fields;
}

/**
 * Implements hook_node_prepare().
 *
 * Wizard child nodes (eg. thank you pages) should get the same layout as their
 * parents (eg. actions) by default.
 */
function campaignion_layout_node_prepare($node) {
  if (empty($node->nid) && !empty($node->wizard_parent)) {
    $parent = new Entity('node', $node->wizard_parent);
    $child = new Entity('node', $node);
    foreach (array_intersect($parent->fieldsOfType('layout_selection'), $child->fieldsOfType('layout_selection')) as $field) {
      if (empty($node->{$field})) {
        $node->{$field} = $node->wizard_parent->{$field} ?? NULL;
      }
    }
  }
}

/**
 * Impelements hook_context_plugins().
 */
function campaignion_layout_context_plugins() {
  $plugins['campaignion_layout_context_condition_layout']['handler'] = [
    'class' => LayoutCondition::class,
    // Ctools throws a not notice if the file doesn’t exist. That’s why a file
    // needs to be passed although we don’t rely on the Drupal/ctools
    // auto loading. @see _ctools_registry_alter().
    'file' => 'src/Context/LayoutCondition.php',
  ];
  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function campaignion_layout_context_registry() {
  $registry = [
    'conditions' => [
      'campaignion_layout_context_condition_layout' => [
        'title' => t('Layout'),
        'description' => t('Set this context based on the selected layout.'),
        'plugin' => 'campaignion_layout_context_condition_layout',
      ],
    ],
  ];
  return $registry;
}
