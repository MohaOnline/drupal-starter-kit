<?php

/**
 * @file
 * Hook implementations for the Campaignion Tracking module.
 */

use Drupal\campaignion_action\Loader;
use Drupal\little_helpers\Webform\Submission;
use Drupal\little_helpers\Webform\Webform;

/**
 * Implements hook_init().
 */
function campaignion_tracking_init() {
  $module_path = drupal_get_path('module', 'campaignion_tracking');
  drupal_add_js($module_path . '/js/events.js', [
    'every_page' => TRUE,
    'group' => JS_LIBRARY,
    // Should be before drupal.js with weight -1 to run before behaviors.
    'weight' => -5,
  ]);
  $events = module_invoke_all('campaignion_tracking_events');
  drupal_alter('campaignion_tracking_events', $events);
  $settings['campaignion_tracking']['events'] = array_filter(array_values($events));
  drupal_add_js($settings, ['type' => 'setting']);
}

/**
 * Implements hook_page_build().
 */
function campaignion_tracking_page_build(&$page) {
  // Add javascript which triggers messages to the tracker.
  $module_path = drupal_get_path('module', 'campaignion_tracking');
  // This should be loaded really early.
  // NB: needs to be loaded before specific tracker JS, so this has -101 on the
  // weight.
  $page['content']['#attached']['js'][$module_path . '/js/campaignion_tracking_common.min.js'] = [
    'scope' => 'header',
    'group' => JS_LIBRARY - 101,
    'preprocess' => FALSE,
  ];
  $page['content']['#attached']['js'][] = $module_path . '/js/campaignion_tracking.js';

  _campaignion_tracking_add_snippets();
}

/**
 * Implements hook_node_view().
 */
function campaignion_tracking_node_view($node, $view_mode, $langcode) {
  $type = Loader::instance()->type($node->type);
  $is_donation = $type && $type->isDonation();

  if ($view_mode !== 'full') {
    return;
  }

  // General information about the node.
  $settings['campaignion_tracking']['context']['node'] = [
    'nid' => $node->nid,
    'type' => $node->type,
    'language' => $node->language,
    'title' => $node->title,
    'view_mode' => $view_mode,
    'is_donation' => $is_donation,
  ];
  $node->content['#attached']['js'][] = ['data' => $settings, 'type' => 'setting'];
}

/**
 * Implements hook_form_FORM_ID_alter() for webform_client_form().
 *
 * We augment the Drupal.campaignion_tracking.context object with information
 * as we get it submitted.
 * Drupal will managed the JS object for us, i.e. paging back and forth in the
 * webform will not delete information once submitted, only update it when
 * changed. Thus we "track" the current form_state in our context.
 *
 * A submit handler is added to deal with redirects.
 */
function campaignion_tracking_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  $type = Loader::instance()->type($node->type);
  $is_donation = $type && $type->isDonation();
  $webform = Webform::fromNode($form['#node']);

  // Information about the current webform.
  $webform_settings['campaignion_tracking']['context']['webform'] = [
    'total_steps' => $form_state['webform']['page_count'],
    'current_step' => $form_state['webform']['page_num'],
    'last_completed_step' => isset($form_state['webform']['page_visited']) ? $form_state['webform']['page_visited'] : 0,
  ];
  $form['#attached']['js'][] = ['data' => $webform_settings, 'type' => 'setting'];

  // Information about a donation (in case the node is one).
  if ($is_donation) {
    // TODO: there might be more than 1 paymethod_select component in the form
    $component = $webform->componentByKey('paymethod_select');
    $currency_code = isset($component['extra']['currency_code']) ? $component['extra']['currency_code'] : 'EUR';
    $submission = $webform->formStateToSubmission($form_state);
    // Interval is read by key
    $interval = $submission->valueByKey('donation_interval');
    // Find first line item with has a value and use this as selected amount component
    $selected_line_item = NULL;
    foreach ($component['extra']['line_items'] as $line_item) {
      $value = $submission->valueByCid($line_item->amount_component);
      if ($value) {
        $selected_line_item = $line_item;
        break;
      }
    }

    // NB: Only after the amount step submit we get values.
    // Thus `interval` and `amount` might be "null" in JS (in case no values
    // have been submitted so far)
    $description = $selected_line_item->description ?? '';
    $donation_settings['campaignion_tracking']['context']['donation'] = [
      'id' => "{$node->nid}-{$component['cid']}",
      'name' => trim("{$node->title} {$description}"),
      'currency_code' => $currency_code,
      'interval' => $interval,
      'amount' => $selected_line_item ? $submission->valueByCid($selected_line_item->amount_component) : NULL,
      'amount_component' => $selected_line_item ? $selected_line_item->amount_component : NULL,
    ];
    $form['#attached']['js'][] = ['data' => $donation_settings, 'type' => 'setting'];
  }
}

/**
 * Implements hook_webform_redirect_alter().
 *
 * Add webform tracking data to the URL-fragment of the redirect.
 *
 * We want the SID and optionally donation specific information appended to the
 * URL so that trackers can pick it up.
 */
function campaignion_tracking_webform_redirect_alter($redirect, Submission $submission) {
  $type = Loader::instance()->type($submission->node->type);
  $is_donation = $type && $type->isDonation();

  $fragments = [];
  // Track a submission (s).
  $trackingFragments[] = 't=s';
  // Add webform context.
  $webformFragments[] = 'nid=' . $submission->node->nid;
  $webformFragments[] = 'sid=' . $submission->sid;
  $webformFragments[] = 'title=' . rawurlencode($submission->node->title);

  $channels = array_keys(campaignion_opt_in_channel_info());
  // Add optin values for all defined optin fields
  foreach ($channels as $channel) {
    if ($value = $submission->opt_in->canonicalValue($channel, TRUE)) {
      $webformFragments[] = 'optin[' . rawurlencode($channel) . ']=' . rawurlencode($value);
    }
  }

  $donationFragments = [];
  if ($is_donation) {
    // Load the payments into submission objects.
    // We want the used paymethods name and maybe the pid.
    $submission->payments = [];
    $submissions[$submission->sid] = $submission->unwrap();
    webform_paymethod_select_webform_submission_load($submissions);

    // Track a donation success (ds).
    $trackingFragments[] = 't=ds';
    foreach ($submissions[$submission->sid]->payments as $payment) {
      // Add context for donation tracking.
      $donationFragments[] = "m=" . $payment->method->name;
    }
  }

  $fragments[] = 't:'. implode('&', $trackingFragments);
  $fragments[] = 'w:'. implode('&', $webformFragments);
  if ($donationFragments) {
    $fragments[] = 'd:'. implode('&', $donationFragments);
  }

  $tracking_fragment = implode(';', $fragments);
  $redirect->fragment = empty($redirect->fragment) ? $tracking_fragment : $redirect->fragment . ';' . $tracking_fragment;
}

/**
 * Helper function to get all defined snippets.
 */
function _campaignion_tracking_snippets() {
  $snippets = module_invoke_all('campaignion_tracking_snippets');
  foreach ($snippets as &$snippet) {
    if (!is_array($snippet)) {
      $snippet = ['js' => $snippet];
    }
    $snippet += ['event' => variable_get_value('campaignion_tracking_default_event')];
  }
  drupal_alter('campaignion_tracking_snippets', $snippets);
  return $snippets;
}

/**
 * Implements hook_campaignion_tracking_events().
 */
function campaignion_tracking_campaignion_tracking_events() {
  $events = [];
  foreach (_campaignion_tracking_snippets() as $snippet) {
    $events[$snippet['event']] = $snippet['event'];
  }
  return $events;
}

/**
 * Gather snippets from hooks and add them to the page.
 */
function _campaignion_tracking_add_snippets() {
  // Disable all tracking on admin pages.
  if (path_is_admin($_GET['q'])) {
    return;
  }

  // Check if tracking should be disabled all together e.g. in case we are
  // working not in a production environment.
  if (!variable_get('campaignion_tracking_enabled', TRUE) || !($snippets = _campaignion_tracking_snippets())) {
    return;
  }

  // Either tracking was allowed already, or we wait for the appropriate event.
  $parts[] = <<<HEADER
jQuery(function() {
HEADER;

  // Add parts
  foreach ($snippets as $snippet) {
    if ($event = $snippet['event']) {
      $parts[] = <<<SNIPPET
Drupal.campaignion_tracking.eventsFired['{$snippet['event']}'].then(function() {
{$snippet['js']}
});
SNIPPET;
    }
    else {
      $parts[] = $snippet['js'];
    }
  }

  $parts[] = <<<FOOTER
});
FOOTER;

  // This should be added pretty early in the DOM so that the library JS get
  // the correct allowed state early enough.
  drupal_add_js(implode('', $parts), [
    'type' => 'inline',
    'group' => JS_LIBRARY,
    'every_page' => TRUE,
    'weight' => -4,
  ]);
}
