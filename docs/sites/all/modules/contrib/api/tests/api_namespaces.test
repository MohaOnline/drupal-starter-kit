<?php

/**
 * @file
 * Tests that namespace functionality works.
 */

module_load_include('php', 'api', 'tests/api_test_case');
module_load_include('php', 'api', 'api.db.inc');

/**
 * Tests that namespace and YAML functionality works.
 */
class ApiTestNamespaces extends ApiWebPagesBaseTest {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Namespaces',
      'description' => 'Tests that namespaces and YAML work properly.',
      'group' => 'API module',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $this->baseSetUp();

    // Set up a files branch for the namespaces files.
    $this->branchInfo = $this->setUpBranchUi('', TRUE, array(
      'directory' => drupal_get_path('module', 'api') . '/tests/sample_namespace',
      'excluded' => '',
    ));

    // Set up a files branch for the second namespace branch files.
    $this->branchInfo2 = $this->setUpBranchUi('', FALSE, array(
      'directory' => drupal_get_path('module', 'api') . '/tests/sample_namespace2',
      'branch_name' => 'second_b',
      'title' => 'Second branch',
      'excluded' => '',
    ));

    // We don't need the PHP branch for this test, so for speed, remove it.
    $this->removePhpBranch();

    // Parse the code.
    $this->resetBranchesAndCache();
    $this->updateBranches();
    $this->processApiParseQueue();

    // To test a bug in calculating overrides in interfaces with multiple
    // inheritance, parse the InterfaceH file again.
    api_mark_for_reparse('InterfaceH.php');
    $this->resetBranchesAndCache();
    $this->updateBranches();
    $this->processApiParseQueue();
  }

  /**
   * Runs all the tests, so that setUp() isn't done multiple times.
   */
  public function testAll() {
    $this->verifyNamespacePages();
    $this->verifyYaml();
  }

  /**
   * Tests that the namespace pages and namespaced objects work fine.
   */
  protected function verifyNamespacePages() {
    // Test namespaces page.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/namespaces');
    $this->assertLink('api\\test1', 0, 'First namespace link is there');
    $this->assertLink('api\\test2', 0, 'Second namespace link is there');

    // Test contents of namespace page.
    $this->clickLink('api\\test1');
    $this->assertLink('ClassA', 0, 'ClassA is on first namespace page');
    $this->assertLink('InterfaceD', 0, 'InterfaceD is on first namespace page');
    $this->assertText('InterfaceD.php', 'Right InterfaceD file is on first namespace page');
    $this->assertNoLink('ClassB', 'ClassB is not on first namespace page');
    $this->assertText('Sample class in a namespace.', 'ClassA description is on first namespace page');
    $this->assertLink('TraitF', 0, 'TraitF is on first namespace page');
    $this->assertText('A sample trait.', 'Trait description is on namespace page');
    // Verify that the link to the other branch is there.
    $this->assertText('Same name in other branches');
    $this->assertLink($this->branchInfo2['branch_name'] . ' ' . 'api\\test1');

    // Test that namespace link is on class page.
    $this->clickLink('ClassA');
    $this->assertText('Namespace', 'Namespace header is on class page');
    $this->assertLink('api\\test1', 0, 'Namespace link is on class page');

    // Test linking in docs to some functions etc.
    $this->assertLink('MyClassB::bMethod', 0, 'Link to aliased class method is made');
    $this->assertLink('another_function', 0, 'Link to non namespaced function is made');
    $this->assertLink('InterfaceD::dMethod', 0, 'Link to interface method in same namespace is made');
    $this->clickLink('api\\test1');
    $this->assertLink('InterfaceD', 0, 'Link went back to namespace page');

    // Verify that on method/function pages, param types make links, and that
    // incorrect interface overrides are not present.
    $this->clickLink('InterfaceD');
    $this->assertNoRaw('InterfaceC::dMethod');
    $this->clickLink('InterfaceD::dMethod');
    $this->assertLink('\\api\\test2\\InterfaceC', 0, 'Link to param type is there');

    // Verify that namespace page URLs work without branch name.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/namespace/api!test2');
    $this->assertLink('ClassB');
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/namespace/api!test2/' . $this->branchInfo['branch_name']);

    // Test contents of second namespace page.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/namespaces');
    $this->clickLink('api\\test2');
    $this->assertLink('ClassB', 0, 'ClassB is on second namespace page');
    $this->assertLink('ClassE', 0, 'ClassE is on second namespace page');
    $this->assertLink('InterfaceC', 0, 'InterfaceC is on second namespace page');
    $this->assertLink('InterfaceD', 0, 'InterfaceD is on second namespace page');
    $this->assertText('InterfaceD2.php', 'Right InterfaceD file is on second namespace page');
    $this->assertNoLink('ClassA', 'ClassA is not on second namespace page');

    // Verify that on class variable pages, types make links.
    $this->clickLink('ClassE');
    $this->clickLink('ClassE::$foobar');
    $this->assertLink('\\api\\test1\\InterfaceD', 0, 'Link to type of member variable is there');

    // Verify that incorrect interface overrides are not present.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/namespaces');
    $this->clickLink('api\\test2');
    $this->clickLink('InterfaceC');
    $this->assertNoRaw('InterfaceD::cMethod');

    // Verify namespace links on file pages.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/ClassA.php/' . $this->branchInfo['branch_name']);
    $this->assertText('Namespace', 'Namespace header is on file page');
    $this->assertLink('api\\test1', 0, 'Namespace link is on file page');
    $this->clickLink('api\\test1');
    $this->assertLink('InterfaceD', 0, 'Link went back to namespace page');

    // Verify lack of namespace links on no-namespace files.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/no_namespace.php/' . $this->branchInfo['branch_name']);
    $this->assertNoText('Namespace', 'Namespace header is not on non-namespaced file page');
    $this->assertNoLink('api\\test1', 'Namespace link is not on non-namespaced file page');
    $this->assertNoLink('api\\test2', 'Namespace link is not on non-namespaced file page');
    $this->clickLink('ClassQ');
    $this->assertNoText('Namespace', 'Namespace header is not on non-namespaced class page');
    $this->assertNoLink('api\\test1', 'Namespace link is not on non-namespaced class page');
    $this->assertNoLink('api\\test2', 'Namespace link is not on non-namespaced class page');

    // Test use references.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/ClassB.php/class/ClassB');

    $this->assertText('1 file declares its use of ClassB', 'Reference text is on class page');
    $this->assertLink('ClassA.php', 0, 'Link to file using class is present');

    // Verify traits are listed on the Classes page.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/classes');
    $this->assertLink('TraitF', 0, 'Trait appears on classes page');

    // Verify trait, class, interface turn into links on Files page
    // (from @file tag first lines).
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/files');
    $this->assertLink('\api\test1\TraitF', 0, 'Trait turns into link in documentation');
    $this->assertLink('\api\test1\ClassA', 0, 'Class turns into link in documentation');
    $this->assertLink('\api\test2\InterfaceC', 0, 'Interface turns into link in documentation');

    // Verify trait page.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/TraitF.php/trait/TraitF');
    $this->assertText('A sample trait.', 'Trait summary is there.');
    $this->assertText('Longer description of the trait', 'Trait description is there');
    $this->assertLink('api\test1', 0, 'Namespace link is present on trait page');
    $this->assertLink('TraitF::$fvar', 0, 'Trait property link is present on trait page');
    $this->assertLink('TraitF::xyz', 0, 'Trait method link is present on trait page');
    $this->assertLink('ClassE.php', 0, 'Link to file using trait is present on trait page');

    // Verify page for class using trait.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/ClassE.php/class/ClassE');
    $this->assertLink('TraitF::$fvar', 0, 'Trait property link is present on using class page');
    $this->assertLink('TraitF::xyz', 0, 'Trait method link is present on using class page');
    $this->assertLink('TraitG::abc', 0, 'Trait method link is present on using class page');
    $this->assertLink('TraitF', 0, 'Link to used trait is present on class page');
    $this->assertLink('TraitG', 0, 'Link to used trait is present on class page');
    // Verify insteadof.
    $this->assertLink('TraitG::def', 0, 'Trait method insteadof link is present on using class page');
    $this->assertNoLink('TraitF::def', 'Trait method omitted with insteadof is not present');

    // Verify links in code for class using trait.
    $this->clickLink('ClassE::eMethod');
    $this->assertLink('fvar', 0, 'Property from trait turns into link');
    $this->assertLink('xyz', 0, 'Method from trait turns into link');
    $this->clickLink('xyz');
    $this->assertText('Method to inherit', 'Clicked through to method page');

    // Verify link and reference for non-namespaced class.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/ClassE.php/class/ClassE');
    $this->clickLink('ClassE::staticMethod');
    $this->assertLink('bMethod', 0, 'Link to non-namespaced method works');
    $this->assertText('1 call to ClassE::staticMethod()');
    $this->clickLink('bMethod');
    $this->assertText("1 call to ClassQ::bMethod()", 'Call reference is there');

    // Verify other reference calls.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/ClassA.php/class/ClassA');
    $this->clickLink('ClassA::sMethod');
    $this->assertText('1 call to ClassA::sMethod()');
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/ClassA.php/class/ClassA');
    $this->clickLink('ClassB::bMethod');
    $this->assertText('1 call to ClassB::bMethod()');
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/ClassA.php/class/ClassA');
    $this->clickLink('TraitF::xyz');
    $this->assertText('2 calls to TraitF::xyz()');

    // Test traits with aliases.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/ClassA.php/class/ClassA');
    $this->assertLink('TraitF::$fvar', 0, 'Trait property link is present on using class page');
    $this->assertLink('TraitF::xyz', 0, 'Trait method link is present on using class page');
    $this->assertText('Aliased as: pdq', 'Trait alias text is present on using class page');

    // Click through to method that uses aliased method and check.
    $this->clickLink('ClassA::cMethod');
    $this->assertLinkUrlSubstring('pdq', $this->branchInfo['project'] . '/TraitF.php/function/TraitF', 'Aliased trait method link exists', 'Aliased trait method link went to the right place');
    $this->clickLink('pdq');
    $this->assertText('Method to inherit', 'Clicking to trait method page went to right place');

    // Turn on the navigation block. This needs to be near the end of the test,
    // because there are tests verifying the word Namespace is not on pages.
    $this->drupalPost(
      'admin/structure/block/list',
      array(
        'blocks[api_navigation][region]' => 'sidebar_first',
      ),
      'Save blocks'
    );
    // Verify the Namespaces link is present in the navigation block.
    $this->drupalGet('api');
    $this->assertLink('Namespaces', 0, 'Namespaces navigation link is present');

    // Set the breaks tag variable and test Classes and Namespaces pages.
    variable_set('api_breaks_tag', '<wbr />');
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/namespaces');
    $this->assertRaw('\\<wbr />', 'Break tag is inserted after a backslash');
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/classes');
    $this->assertRaw('\\<wbr />', 'Break tag is inserted after a backslash');

    // Set breaks tag back to empty to continue with testing.
    variable_set('api_breaks_tag', '');

    // Check formatting for PHP files in top directory of this branch.
    $files = array(
      'ClassA.php',
      'ClassB.php',
      'ClassE.php',
      'InterfaceC.php',
      'InterfaceD.php',
      'InterfaceD2.php',
      'InterfaceH.php',
      'no_namespace.php',
      'TraitF.php',
    );
    foreach ($files as $file) {
      $object = api_filename_load($file, $this->branchInfo['project'], $this->branchInfo['branch_name']);
      $this->assertCodeFormatting($object->code, $this->branchInfo['directory'] . '/' . $object->file_name);
    }
  }

  /**
   * Tests that YAML works properly for linking and references.
   */
  protected function verifyYaml() {
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/sample.routing.yml/' . $this->branchInfo['branch_name']);

    // Verify that the page name is correct.
    $this->assertTitleContains('sample.routing.yml', 'Page title is correct');

    // Verify the links to referenced functions, methods, and classes.
    $this->assertLinkUrlSubstring('\api\test1\ClassA::cMethod', $this->branchInfo['project'] . '/ClassA.php/function/ClassA', 'cMethod link exists', 'cMethod link went to the right place');
    $this->assertLinkUrlSubstring('\api\test1\ClassA::dMethod', $this->branchInfo['project'] . '/ClassA.php/function/ClassA', 'dMethod link exists', 'dMethod link went to the right place');
    $this->assertLinkUrlSubstring('another_function', $this->branchInfo['project'] . '/no_namespace.php/function/another_function', 'another_function link exists', 'another_function link went to the right place');
    $this->assertLinkUrlSubstring('api\test1\ClassA', $this->branchInfo['project'] . '/ClassA.php/class/ClassA', 'ClassA link exists', 'ClassA link went to the right place');

    // Test the references section on the YML file.
    $this->assertText("1 string reference to 'sample.routing'", 'String reference is there');
    $this->assertLink('ClassQ::bMethod', 0, 'Link to referencing method is there');
    $this->assertText("1 string reference to YAML keys in sample.routing.yml", 'YAML keys reference is there');
    $this->assertLink('another_function', 0, 'Link to YML referencing function is there');

    // Verify that the class with a suffix does not turn into a link.
    $this->assertNoLink('ClassQ', 'ClassQ did not turn into a link');

    // Verify the references on the linked functions.
    $this->clickLink('another_function');
    $this->assertText("1 string reference to 'another_function'", 'Reference text is there');
    $this->assertLink('sample.routing.yml', 0, 'Referenced file is linked');

    $this->drupalGet('api/' . $this->branchInfo['project'] . '/sample.routing.yml/' . $this->branchInfo['branch_name']);
    $this->clickLink('\api\test1\ClassA::cMethod');
    $this->assertText("1 string reference to 'ClassA::cMethod'", 'Reference text is there');
    $this->assertLink('sample.routing.yml', 0, 'Referenced file is linked');

    $this->drupalGet('api/' . $this->branchInfo['project'] . '/sample.routing.yml/' . $this->branchInfo['branch_name']);
    $this->clickLink('\api\test1\ClassA::dMethod');
    $this->assertText("1 string reference to 'ClassA::dMethod'", 'Reference text is there');
    $this->assertText("1 call to ClassA::dMethod()", 'Call text is there');
    $this->assertLink('sample.routing.yml', 0, 'Referenced file is linked');

    $this->drupalGet('api/' . $this->branchInfo['project'] . '/sample.routing.yml/' . $this->branchInfo['branch_name']);
    $this->clickLink('api\test1\ClassA');
    $this->assertText("1 string reference to 'ClassA'", 'Reference text is there');
    $this->assertLink('sample.routing.yml', 0, 'Referenced file is linked');

    // Verify the links to the YML file.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/no_namespace.php/function/another_function');
    $this->assertLinkUrlSubstring('user_register', $this->branchInfo['project'] . '/sample.routing.yml', 'user_register link exists', 'user_register link went to the right place');

    $this->drupalGet('api/' . $this->branchInfo['project'] . '/no_namespace.php/class/ClassQ');
    $this->clickLink('ClassQ::bMethod');
    $this->assertLinkUrlSubstring('sample.routing', $this->branchInfo['project'] . '/sample.routing.yml', 'sample.routing link exists', 'sample.routing link went to the right place');
  }

}

/**
 * Tests that namespace-related cruft in API module is removed appropriately.
 */
class ApiTestNamespaceCruft extends ApiWebPagesBaseTest {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Namespace cruft removal',
      'description' => 'Tests that data stored by the API module is removed when appropriate, with namespaces included.',
      'group' => 'API module',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $this->baseSetUp();

    // Set up a new super-user.
    $this->super_user = $this->drupalCreateUser(array(
      'access API reference',
      'administer API reference',
      'access content',
      'access administration pages',
      'administer blocks',
      'administer nodes',
      'access site reports',
      'access comments',
      'post comments',
      'skip comment approval',
    ));

    $this->drupalLogin($this->super_user);

    // Set up comment settings.
    $this->drupalPost(
      'admin/config/development/api/comments',
      array(
        'comment' => 2,
      ),
      'Save comment settings');

    // We don't need the PHP branch for this test, so for speed, remove it.
    $this->removePhpBranch();

    // Add one node to the database.
    $this->drupalCreateNode();
  }

  /**
   * Tests that cruft is removed appropriately.
   */
  public function testCruftRemoval() {
    $counts = array(
      'api_project' => 0,
      'api_branch' => 0,
      'api_php_branch' => 0,
      'api_documentation' => 0,
      'api_php_documentation' => 0,
      'api_function' => 0,
      'api_members' => 0,
      'api_overrides' => 0,
      'api_file' => 0,
      'api_namespace' => 0,
      'node' => 1,
      'comment' => 0,
    );
    $this->verifyCounts($counts, 0, 'No branches');

    // Add a branch for the namespace test files.
    $this->branchInfo = $this->setUpBranchUi('', TRUE, array(
      'directory' => drupal_get_path('module', 'api') . '/tests/sample_namespace',
      'excluded' => '',
    ));

    $counts['api_project'] = 1;
    $counts['api_branch'] = 1;
    $this->resetBranchesAndCache();
    $this->verifyCounts($counts, 0, 'Branch added');

    // Run the branch update function and verify counts. There should be
    // records for each file.
    $this->updateBranches();
    $counts['node'] = 12;
    $counts['api_documentation'] = 11;
    $counts['api_file'] = 11;
    $this->verifyCounts($counts, 11, 'Add and update branch');

    // Parse everything and verify counts.
    $this->checkAndClearLog();
    $this->updateBranches();
    $this->processApiParseQueue();
    $counts['node'] = 40;
    $counts['api_documentation'] = 39;
    $counts['api_function'] = 16;
    $counts['api_file'] = 11;
    $counts['api_members'] = 27;
    $counts['api_overrides'] = 17;
    $counts['api_namespace'] = 17;
    $this->verifyCounts($counts, 0, 'Parse the branch');

    // Delete the branch, and verify counts.
    $default_branch = api_get_branch_by_id();
    $this->drupalPost('admin/config/development/api/branches/' . $default_branch->branch_id . '/delete', array(), 'Delete');
    $this->resetBranchesAndCache();
    $counts['api_branch'] = 0;
    $counts['api_file'] = 0;
    $counts['api_documentation'] = 0;
    $counts['api_function'] = 0;
    $counts['node'] = 1;
    $counts['api_members'] = 0;
    $counts['api_overrides'] = 0;
    $counts['api_namespace'] = 0;
    $counts['api_reference_storage'] = 0;
    $counts['api_reference_counts'] = 0;
    $this->verifyCounts($counts, 0, 'Branch deleted');

    // Delete the project and verify counts.
    $this->drupalPost('admin/config/development/api/projects/' . $default_branch->project . '/delete', array(), 'Delete');
    $counts['api_project'] = 0;
    $this->verifyCounts($counts, 0, 'Project deleted');
  }

}
