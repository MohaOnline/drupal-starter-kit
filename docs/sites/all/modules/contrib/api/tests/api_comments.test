<?php

/**
 * @file
 * Tests comment functionality for the API module.
 */

module_load_include('php', 'api', 'tests/api_test_case');

/**
 * Tests comment functionality.
 */
class ApiTestComments extends ApiWebPagesBaseTest {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Comments',
      'description' => 'Tests comment functionality.',
      'group' => 'API module',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $this->baseSetUp();

    // Set up a new super-user.
    $this->super_user = $this->drupalCreateUser(array(
      'access API reference',
      'administer API reference',
      'access content',
      'access administration pages',
      'administer blocks',
      'administer nodes',
      'access site reports',
      'access comments',
      'post comments',
      'skip comment approval',
    ));

    $this->drupalLogin($this->super_user);

    // Set up comment settings initially as hidden.
    $this->drupalPost('admin/config/development/api/comments', array(
      'comment' => 0,
    ), 'Save comment settings');

    // Set up a regular files branch.
    $this->branchInfo = $this->setUpBranchUi();

    // We don't need the PHP branch for this test, so for speed, remove it.
    $this->removePhpBranch();

    // Parse the code.
    $this->resetBranchesAndCache();
    $this->updateBranches();
    $this->processApiParseQueue();
  }

  /**
   * Tests that comments and comment settings are working.
   */
  public function testComments() {
    // Verify that with comments turned off, the comment form does not appear.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/classes.php/class/Sample');
    $this->assertNoText('Add new comment', 'Comment form is not there');
    $this->assertNoText('Comment', 'Comment form is not there');
    $this->assertNoText('Subject', 'Comment form is not there');
    $this->assertNoRaw('Save', 'Comment form is not there');

    // Turn comments on. Verify this did not affect old API pages.
    $this->drupalPost('admin/config/development/api/comments', array(
      'comment' => 2,
    ), 'Save comment settings');
    $this->assertText('Saved API comment settings', 'Confirm message appears');
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/classes.php/class/Sample');
    $this->assertNoText('Add new comment', 'Comment form is not there');
    $this->assertNoText('Comment', 'Comment form is not there');
    $this->assertNoText('Subject', 'Comment form is not there');
    $this->assertNoRaw('Save', 'Comment form is not there');

    // Apply the settings to old pages, and post a comment.
    $this->drupalGet('admin/config/development/api/comments');
    $this->clickLink('Apply current default comment settings to existing API pages');
    $this->assertText('Applied default comment settings to existing API pages', 'Confirm message appears');
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/classes.php/class/Sample');
    $this->drupalPost(NULL, array(
      'subject' => 'Subject 1',
      'comment_body[und][0][value]' => 'Comment 1 body',
    ), 'Save');
    $this->assertText('Your comment has been posted', 'Confirm message appears');
    $this->assertLink('Subject 1', 0, 'Comment subject appears');
    $this->assertText('Comment 1 body', 'Comment body appears');
    $this->assertLink('reply', 0, 'Reply link appears');

    // Reparse the branch, and verify the comment is still there.
    $this->drupalGet('admin/config/development/api/branches');
    $this->clickLink('reparse');
    $this->assertText('reparse, starting at next cron run', 'Confirm message appears');
    $this->updateBranches();
    $count = $this->processApiParseQueue();
    $this->assertTrue($count > 5, 'Files were reparsed');
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/classes.php/class/Sample');
    $this->assertLink('Subject 1', 0, 'Comment subject appears');
    $this->assertText('Comment 1 body', 'Comment body appears');
    $this->assertLink('reply', 0, 'Reply link appears');

    // Set to closed (apply to all) and verify the comment form disapppears.
    $this->drupalPost('admin/config/development/api/comments', array(
      'comment' => 1,
    ), 'Save comment settings');
    $this->assertText('Saved API comment settings', 'Confirm message appears');
    $this->clickLink('Apply current default comment settings to existing API pages');
    $this->assertText('Applied default comment settings to existing API pages', 'Confirm message appears');
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/classes.php/class/Sample');
    $this->assertLink('Subject 1', 0, 'Comment subject appears');
    $this->assertText('Comment 1 body', 'Comment body appears');
    $this->assertNoLink('reply', 0, 'Reply link disappears');
    $this->assertNoText('Add new comment', 'Comment form is not there');
    $this->assertNoRaw('Save', 'Comment form is not there');

    // Set to hidden (apply to all) and verify comment disappears.
    $this->drupalPost('admin/config/development/api/comments', array(
      'comment' => 0,
    ), 'Save comment settings');
    $this->assertText('Saved API comment settings', 'Confirm message appears');
    $this->clickLink('Apply current default comment settings to existing API pages');
    $this->assertText('Applied default comment settings to existing API pages', 'Confirm message appears');
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/classes.php/class/Sample');
    $this->assertNoLink('Subject 1', 0, 'Comment subject disappears');
    $this->assertNoText('Comment 1 body', 'Comment body disappears');
    $this->assertNoLink('reply', 0, 'Reply link disappears');
    $this->assertNoText('Add new comment', 'Comment form is not there');
    $this->assertNoText('Comment', 'Comment form is not there');
    $this->assertNoText('Subject', 'Comment form is not there');
    $this->assertNoRaw('Save', 'Comment form is not there');
  }

}

/**
 * Tests the API text format in comments.
 */
class ApiTestTextFormat extends ApiWebPagesBaseTest {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'API text format',
      'description' => 'Tests API text format functionality in comments.',
      'group' => 'API module',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $this->baseSetUp();

    // Set up a new super-user.
    $this->super_user = $this->drupalCreateUser(array(
      'access API reference',
      'administer API reference',
      'access content',
      'access administration pages',
      'administer blocks',
      'administer nodes',
      'access site reports',
      'access comments',
      'post comments',
      'skip comment approval',
      'administer filters',
    ));

    $this->drupalLogin($this->super_user);

    // Set up comment settings so comments are allowed.
    $this->drupalPost('admin/config/development/api/comments', array(
      'comment' => COMMENT_NODE_OPEN,
    ), 'Save comment settings');

    // Remove the PHP branch.
    $this->removePhpBranch();

    // Create a "php" branch with the sample PHP function list, from the admin
    // interface.
    $this->createPhpBranchUi();

    // Set up a branch for the Drupal core files.
    $this->setUpBranchUi('', TRUE, array(
      'project' => 'drupal',
      'project_title' => 'Drupal',
      'project_type' => 'core',
      'branch_name' => '7.x',
      'title' => 'Drupal 7.x',
      'core_compatibility' => '7.x',
      'directory' => drupal_get_path('module', 'api') . '/tests/sample_drupal',
      'excluded' => '',
    ));

    // Set up a files branch for the namespaces files.
    $this->branchInfo = $this->setUpBranchUi('', TRUE, array(
      'directory' => drupal_get_path('module', 'api') . '/tests/sample_namespace',
      'excluded' => '',
    ));

    // Set up the Filtered HTML text format to have the API format as part of
    // it.
    $this->drupalPost('admin/config/content/formats/filtered_html', array(
      'filters[api_filter][status]' => 1,
    ), 'Save configuration');

    // Parse the code.
    $this->resetBranchesAndCache();
    $this->updateBranches();
    $this->processApiParseQueue();
  }

  /**
   * Tests the API text format in comments.
   */
  public function testApiTextFormat() {

    // Go to a namespaced class and make a comment. Verify that links are
    // created and go to the right places.
    $this->drupalGet('api/' . $this->branchInfo['project'] . '/ClassA.php/class/ClassA');
    $this->drupalPost(NULL, array(
      'subject' => 'test',
      'comment_body[und][0][value]' => 'This is a test of links to things like MyClassB::bMethod(), another_function(), InterfaceD::dMethod(), foo_function(), and drupal_alter().',
    ), 'Save');

    $this->assertLinkUrlSubstring('MyClassB::bMethod', 'ClassB.php/function/ClassB', 'Link to aliased class method is created', 'Link to aliased class method goes to right place');
    $this->assertLinkUrlSubstring('another_function', 'no_namespace.php/function/another_function', 'Link to function is created', 'Link to function goes to right place');
    $this->assertLinkUrlSubstring('InterfaceD::dMethod', 'InterfaceD.php/function/InterfaceD', 'Link to interface method is created', 'Link to interface method goes to right namespace');
    $this->assertLinkUrlSubstring('foo_function', 'example.com/function/foo_function', 'Link to fake PHP function is created', 'Link to fake PHP function goes to right place');
    $this->assertLinkUrlSubstring('drupal_alter', 'drupal.php/function/drupal_alter', 'Link to core function is created', 'Link to core function goes to right place');
  }

}

/**
 * Tests the API text format in comments without a regular branch.
 */
class ApiTestTextFormatNoBranch extends ApiWebPagesBaseTest {

  /**
   * Node for commenting.
   *
   * @var object
   */
  public $node;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'API text format references',
      'description' => 'Tests API text format functionality without a regular branch.',
      'group' => 'API module',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $this->baseSetUp();

    // Set up a new super-user.
    $this->super_user = $this->drupalCreateUser(array(
      'access API reference',
      'administer API reference',
      'access content',
      'access administration pages',
      'administer blocks',
      'administer nodes',
      'access site reports',
      'access comments',
      'post comments',
      'skip comment approval',
      'administer filters',
      'administer users',
      'administer permissions',
    ));

    $this->drupalLogin($this->super_user);

    // Remove the PHP branch.
    $this->removePhpBranch();

    // Create a "php" branch with the sample PHP function list, from the admin
    // interface.
    $this->createPhpBranchUi();

    // Temporarily set up a regular files branch and parse it.
    $temp_branch_info = $this->setUpBranchUi();
    $this->resetBranchesAndCache();
    $this->updateBranches();
    $this->processApiParseQueue();

    // Create an "api" branch that points to the temporary branch, and parse
    // it. For this, anonymous users must have permission to view API pages.
    $url = url('api/' . $temp_branch_info['project'] . '/full_list', array('absolute' => TRUE));
    $this->createApiBranchUi(array('data[url]' => $url, 'data[page_limit]' => 10));

    $this->drupalPost('admin/people/permissions', array(
      '1[access API reference]' => TRUE,
    ), 'Save permissions');

    $this->resetBranchesAndCache();
    $this->updateBranches();
    $this->processApiParseQueue();

    $this->drupalGet('admin/reports/dblog');

    // Remove the files branch.
    $this->drupalPost('admin/config/development/api/branches/1/delete', array(), 'Delete');
    $this->resetBranchesAndCache();

    // Verify things are set up right.
    $this->verifyCounts(array(
      'api_branch' => 0,
      'api_documentation' => 0,
      'api_php_branch' => 2,
      'api_external_documentation' => 73,
      'api_php_documentation' => 2,
    ), 0, 'Branches set up');

    // Set the core compatibility to 7.x.
    $this->drupalPost('admin/config/development/api', array(
      'api_default_core_compatibility' => '7.x',
    ), 'Save configuration');

    // Set up the Filtered HTML text format to have the API format as part of
    // it.
    $this->drupalPost('admin/config/content/formats/filtered_html', array(
      'filters[api_filter][status]' => 1,
    ), 'Save configuration');

    // Make a node.
    $this->node = $this->drupalCreateNode(array('comment' => COMMENT_NODE_OPEN));
  }

  /**
   * Tests the API text format in comments.
   */
  public function testApiTextFormat() {
    // Go to the node page and make a comment. Verify that links are
    // created and go to the right places.
    $this->drupalGet('node/' . $this->node->nid);
    $this->drupalPost(NULL, array(
      'subject' => 'test',
      'comment_body[und][0][value]' => 'This is a test of links to things like foo_function() and sample_function() and SubSample and SubSample::bar().',
    ), 'Save');

    $this->assertLinkUrlSubstring('foo_function', 'example.com/function/foo_function', 'Link to fake PHP function is created', 'Link to fake PHP function goes to right place');
    $this->assertLinkUrlSubstring('sample_function', 'sample.php/function/sample_function', 'Link to fake API reference function is created', 'Link to API reference function goes to right place');
    $this->assertLinkUrlSubstring('SubSample', 'classes.php/class/SubSample', 'Link to fake API reference class is created', 'Link to API reference class goes to right place');
    $this->assertLinkUrlSubstring('SubSample::bar', 'classes.php/function/SubSample', 'Link to fake API reference method is created', 'Link to API reference method goes to right place');
  }

}
